#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <sstream>
#include <cstdlib>
#include <nlohmann/json.hpp>

#include "tracker.hpp"


using json = nlohmann::json;

int main(int argc, char **argv) {
  std::cout << "\n";
  std::string detectionFile = argv[1];
  std::string parameterFile = argv[2];
  std::string inputImageDirectoryPath = argv[3];
  std::string outputDirectoryPath = argv[4];
  std::string outputVideoFileName = argv[5];
  std::cout << "Program arguments read in successfully!" << "\n";
  
  // Parse detection data file (generated by detector model)
  std::vector<utils::Detection> detections = utils::ReadDetections(detectionFile);
  std::cout << "Number of detections: " << detections.size() << "\n";

  // Parse tracker parameters
  std::ifstream f(parameterFile);
  json jsonParameters = json::parse(f);
  tracker::TrackerParameters parameters {
    jsonParameters["searchRadius"].get<int>(),
    jsonParameters["minAge"].get<int>(),
    jsonParameters["maxTrackGap"].get<int>(),
    jsonParameters["minImageSpaceDistance"].get<double>(),
  };

  std::cout << "Initialized tracker with parameters:" << "\n";
  std::cout << "Search Radius: " << parameters.searchRadius << "\n";
  std::cout << "Min Age: " << parameters.minAge << "\n";
  std::cout << "Max Track Gap: " << parameters.maxTrackGap << "\n";
  std::cout << "Min Image Space Distance: " << parameters.minImageSpaceDistance << "\n";

  // Initialize tracker
  tracker::Tracker tracker = tracker::Tracker(parameters);
  auto tracks = tracker.CreateTrackingLines(detections);
  std::cout << "Number of tracks: " << tracks.size() << "\n";

  // Visualization
  std::cout << "Begin visualization:" << "\n";
  tracker.VisualizeTracks(
    tracks, 
    inputImageDirectoryPath, 
    outputDirectoryPath,
    outputVideoFileName
  );

  std::cout << "Done." << std::endl;
}